// Generated by Dagger (https://dagger.dev).
package com.fajar.moviedb.core.data;

import com.fajar.moviedb.core.data.local.LocalDataSource;
import com.fajar.moviedb.core.data.remote.RemoteDataSource;
import com.fajar.moviedb.core.utils.AppExecutor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MovieRepository_Factory implements Factory<MovieRepository> {
  private final Provider<RemoteDataSource> remoteDataSourceProvider;

  private final Provider<LocalDataSource> localDataSourceProvider;

  private final Provider<AppExecutor> appExecutorsProvider;

  public MovieRepository_Factory(Provider<RemoteDataSource> remoteDataSourceProvider,
      Provider<LocalDataSource> localDataSourceProvider,
      Provider<AppExecutor> appExecutorsProvider) {
    this.remoteDataSourceProvider = remoteDataSourceProvider;
    this.localDataSourceProvider = localDataSourceProvider;
    this.appExecutorsProvider = appExecutorsProvider;
  }

  @Override
  public MovieRepository get() {
    return newInstance(remoteDataSourceProvider.get(), localDataSourceProvider.get(), appExecutorsProvider.get());
  }

  public static MovieRepository_Factory create(Provider<RemoteDataSource> remoteDataSourceProvider,
      Provider<LocalDataSource> localDataSourceProvider,
      Provider<AppExecutor> appExecutorsProvider) {
    return new MovieRepository_Factory(remoteDataSourceProvider, localDataSourceProvider, appExecutorsProvider);
  }

  public static MovieRepository newInstance(RemoteDataSource remoteDataSource,
      LocalDataSource localDataSource, AppExecutor appExecutors) {
    return new MovieRepository(remoteDataSource, localDataSource, appExecutors);
  }
}
